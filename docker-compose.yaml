version: '3.7'
services:
  postgres:
    image: postgres:15.3-alpine3.17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5432:5432
    volumes:
      - ./db_scripts:/docker-entrypoint-initdb.d
      - ~/data/traffic_light/postgres:/var/lib/postgresql/data
  rabbitmq:
    image: rabbitmq:alpine
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/data/traffic_light/rabbitmq:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
  frontend:
    image: light-traffic-frontend:local
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
    ports:
      - 3000:3000
    command: ['npm', 'start', 'dev']
  event_store:
    image: light-traffic-event-store:local
    build:
      context: ./event_store
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - rabbitmq
    command: ['go', 'run', 'main.go']
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DATABASE=event_store
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - CONTROLLER_QUEUE=controller
      - PROJECTION_QUEUE=projection
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - PORT=1111
    ports:
      - 1111:1111
    volumes:
      - ./event_store:/app
  controller:
    image: light-traffic-controller:local
    build:
      context: ./controller
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=controller
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - CONTROLLER_QUEUE=controller
      - PROJECTION_QUEUE=projection
      - RABBITMQ_CONNECTION_STRING=amqp://guest:guest@rabbitmq:5672/
      - PORT=2222
    ports:
      - 2222:2222
    volumes:
      - ./controller:/app
    command: ['go', 'run', 'main.go']
  projector:
    image: light-traffic-projector:local
    build:
      context: ./projector
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=projections
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - CONTROLLER_QUEUE=controller
      - PROJECTION_QUEUE=projection
      - RABBITMQ_CONNECTION_STRING=amqp://guest:guest@rabbitmq:5672/
      - PORT=3333
    ports:
      - 3333:3333
    volumes:
      - ./projector:/app
    command: ['go', 'run', 'main.go']
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   restart: unless-stopped
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - ~/data/traffic_light/prometheus:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--web.enable-lifecycle'
  #   expose:
  #     - 9090
  #   depends_on:
  #     - event_store
  #     - controller
  #     - projector
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   restart: unless-stopped
  #   volumes:
  #     - ~/data/traffic_light/grafana:/var/lib/grafana
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   ports:
  #     - 3001:3000
  #   depends_on:
  #     - prometheus